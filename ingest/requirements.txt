# ============================================================================
# Dependências do Serviço de Ingest - TrakSense
# ============================================================================
# Este arquivo define as bibliotecas Python necessárias para o serviço
# de ingestão de dados IoT via MQTT.
#
# Instalação:
#   pip install -r requirements.txt
#
# Atualização:
#   pip install --upgrade -r requirements.txt
# ============================================================================

# ----------------------------------------------------------------------------
# MQTT Client Assíncrono
# ----------------------------------------------------------------------------
# asyncio-mqtt: Cliente MQTT assíncrono para ingest de alta performance
asyncio-mqtt>=0.16.2

# asyncpg: Driver PostgreSQL assíncrono nativo (mais rápido que psycopg)
asyncpg>=0.29.0

# Pydantic: Validação de schemas de payload
pydantic>=2.8.0

# orjson: JSON parser/serializer ultra-rápido (C extension)
orjson>=0.10.0

# Prometheus client: Métricas de observabilidade
prometheus-client>=0.20.0

# uvloop: Event loop otimizado (substituir asyncio padrão em prod)
# Apenas para Linux/macOS (não compatível com Windows)
uvloop>=0.19.0 ; sys_platform != "win32"

# ----------------------------------------------------------------------------
# Dependências Originais (mantidas para compatibilidade)
# ----------------------------------------------------------------------------
# aiomqtt: Cliente MQTT moderno e assíncrono baseado em paho-mqtt
# - Suporte completo a asyncio/await
# - Substitui asyncio-mqtt (deprecated)
# - Compatível com Python 3.12+
# - Suporta QoS 0, 1, 2
# - Context managers para gerenciamento de conexão
# Docs: https://sbtinstruments.github.io/aiomqtt/
aiomqtt>=2.3.0

# ----------------------------------------------------------------------------
# PostgreSQL/TimescaleDB Client Assíncrono
# ----------------------------------------------------------------------------
# asyncpg: Driver PostgreSQL assíncrono de alta performance
# - 3x mais rápido que psycopg2
# - Suporte nativo a asyncio
# - Connection pooling integrado
# - Suporte a COPY para bulk inserts (usado em batch de telemetria)
# - Prepared statements automáticos
# Docs: https://magicstack.github.io/asyncpg/
asyncpg>=0.29

# ----------------------------------------------------------------------------
# Validação e Schemas de Dados
# ----------------------------------------------------------------------------
# pydantic: Validação de dados com type hints
# - Usado nos adapters de payload (parsec_v1.py, etc.)
# - Validação automática de tipos
# - Serialização/deserialização JSON
# - Mensagens de erro detalhadas
# - Performance otimizada (usa Rust internamente via pydantic-core)
# Docs: https://docs.pydantic.dev/
pydantic>=2.8

# ============================================================================
# DEPENDÊNCIAS FUTURAS (Fase 2+)
# ============================================================================
# Descomentar conforme necessário:
#
# redis>=5.0              # Cache e pub/sub para escalabilidade
# prometheus-client>=0.19 # Métricas de performance e health
# structlog>=24.0         # Logging estruturado (JSON)
# sentry-sdk>=1.40        # Error tracking e alertas
# python-json-logger>=2.0 # Logs em formato JSON para ELK/Loki
# ============================================================================
