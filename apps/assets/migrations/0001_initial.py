# Generated by Django 5.0.1 on 2025-10-19 18:43

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        db_index=True,
                        help_text="Identificador único do equipamento (ex: AHU-001, CH-001)",
                        max_length=100,
                        unique=True,
                        verbose_name="Tag",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text='Nome descritivo do equipamento (ex: "Chiller Principal Torre A")',
                        max_length=200,
                        verbose_name="Nome",
                    ),
                ),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("CHILLER", "Chiller"),
                            ("AHU", "Air Handling Unit (Unidade de Tratamento de Ar)"),
                            ("FAN_COIL", "Fan Coil"),
                            ("PUMP", "Bomba"),
                            ("BOILER", "Caldeira"),
                            ("COOLING_TOWER", "Torre de Resfriamento"),
                            ("VRF", "VRF (Variable Refrigerant Flow)"),
                            ("RTU", "Roof Top Unit"),
                            ("VALVE", "Válvula"),
                            ("SENSOR", "Sensor"),
                            ("CONTROLLER", "Controlador"),
                            ("FILTER", "Filtro"),
                            ("DUCT", "Duto"),
                            ("METER", "Medidor"),
                            ("OTHER", "Outro"),
                        ],
                        db_index=True,
                        help_text="Categoria do equipamento HVAC",
                        max_length=20,
                        verbose_name="Tipo de Equipamento",
                    ),
                ),
                (
                    "asset_type_other",
                    models.CharField(
                        blank=True,
                        help_text="Especificar quando asset_type = OTHER",
                        max_length=200,
                        verbose_name="Outro Tipo (texto livre)",
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True,
                        help_text="Marca do equipamento (ex: Carrier, Trane, York)",
                        max_length=200,
                        verbose_name="Fabricante",
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Modelo do equipamento (ex: 30XA-1002)",
                        max_length=200,
                        verbose_name="Modelo",
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(
                        blank=True,
                        help_text="Serial number do equipamento",
                        max_length=200,
                        verbose_name="Número de Série",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OK", "Operacional"),
                            ("MAINTENANCE", "Em Manutenção"),
                            ("STOPPED", "Parado"),
                            ("ALERT", "Alerta"),
                        ],
                        db_index=True,
                        default="OK",
                        help_text="Estado operacional atual do equipamento",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "health_score",
                    models.IntegerField(
                        default=100,
                        help_text="Pontuação de saúde do equipamento (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Health Score",
                    ),
                ),
                (
                    "location_description",
                    models.CharField(
                        blank=True,
                        help_text='Localização específica dentro do site (ex: "3º Andar - Ala Leste")',
                        max_length=500,
                        verbose_name="Descrição da Localização",
                    ),
                ),
                (
                    "specifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='JSON com especificações técnicas do equipamento:\n        {\n          "capacity": 500,\n          "capacity_unit": "TR",\n          "voltage": 380,\n          "max_current": 100,\n          "refrigerant": "R-410A",\n          "power_consumption": 0,\n          "operating_hours": 0,\n          "brand": "Carrier",\n          "model": "30XA-1002"\n        }\n        ',
                        verbose_name="Especificações Técnicas",
                    ),
                ),
                (
                    "installation_date",
                    models.DateField(
                        blank=True,
                        help_text="Data de instalação do equipamento",
                        null=True,
                        verbose_name="Data de Instalação",
                    ),
                ),
                (
                    "last_maintenance",
                    models.DateTimeField(
                        blank=True,
                        help_text="Data/hora da última manutenção realizada",
                        null=True,
                        verbose_name="Última Manutenção",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
            ],
            options={
                "verbose_name": "Asset",
                "verbose_name_plural": "Assets",
                "db_table": "assets",
                "ordering": ["tag"],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Nome descritivo do device (ex: "Controlador Chiller CH-001")',
                        max_length=200,
                        verbose_name="Nome",
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(
                        db_index=True,
                        help_text="Serial number único do hardware",
                        max_length=200,
                        unique=True,
                        verbose_name="Número de Série",
                    ),
                ),
                (
                    "mqtt_client_id",
                    models.CharField(
                        db_index=True,
                        help_text="Client ID único para autenticação no EMQX (ex: iot-chiller-001)",
                        max_length=200,
                        unique=True,
                        verbose_name="Client ID MQTT",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("CONTROLLER", "Controlador Principal"),
                            ("ENERGY_METER", "Medidor de Energia"),
                            ("SENSOR_HUB", "Hub de Sensores"),
                            ("GATEWAY", "Gateway IoT"),
                            ("OTHER", "Outro"),
                        ],
                        default="CONTROLLER",
                        help_text="Categoria do dispositivo IoT",
                        max_length=20,
                        verbose_name="Tipo de Dispositivo",
                    ),
                ),
                (
                    "firmware_version",
                    models.CharField(
                        blank=True,
                        help_text="Versão do software embarcado (ex: v2.1.3)",
                        max_length=50,
                        verbose_name="Versão do Firmware",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ONLINE", "Online"),
                            ("OFFLINE", "Offline"),
                            ("ERROR", "Erro"),
                            ("MAINTENANCE", "Manutenção"),
                        ],
                        db_index=True,
                        default="OFFLINE",
                        help_text="Estado atual da conexão MQTT",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Timestamp do último heartbeat/mensagem recebida",
                        null=True,
                        verbose_name="Última Conexão",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "asset",
                    models.ForeignKey(
                        help_text="Equipamento ao qual este device está conectado",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="devices",
                        to="assets.asset",
                        verbose_name="Asset",
                    ),
                ),
            ],
            options={
                "verbose_name": "Device",
                "verbose_name_plural": "Devices",
                "db_table": "devices",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Sensor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        db_index=True,
                        help_text="Identificador do sensor (ex: AHU-001-TEMP-SUPPLY)",
                        max_length=200,
                        verbose_name="Tag",
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("temp_supply", "Temperatura de Suprimento"),
                            ("temp_return", "Temperatura de Retorno"),
                            ("temp_external", "Temperatura Externa"),
                            ("temp_setpoint", "Setpoint de Temperatura"),
                            ("humidity", "Umidade Relativa"),
                            ("dewpoint", "Ponto de Orvalho"),
                            ("pressure_suction", "Pressão de Sucção"),
                            ("pressure_discharge", "Pressão de Descarga"),
                            ("dp_filter", "Diferencial de Pressão - Filtro"),
                            ("dp_fan", "Diferencial de Pressão - Ventilador"),
                            ("airflow", "Vazão de Ar"),
                            ("rpm_fan", "Rotação do Ventilador (RPM)"),
                            ("voltage", "Tensão (V)"),
                            ("current", "Corrente (A)"),
                            ("power_kw", "Potência Ativa (kW)"),
                            ("energy_kwh", "Energia Acumulada (kWh)"),
                            ("power_factor", "Fator de Potência"),
                            ("superheat", "Superaquecimento"),
                            ("subcooling", "Sub-resfriamento"),
                            ("vibration", "Vibração"),
                            ("noise", "Ruído (dB)"),
                            ("compressor_state", "Estado do Compressor"),
                            ("valve_position", "Posição da Válvula (%)"),
                            ("cop", "Coeficiente de Performance (COP)"),
                            ("eer", "Energy Efficiency Ratio (EER)"),
                            ("maintenance", "Status de Manutenção"),
                            ("maintenance_reminder", "Lembrete de Manutenção"),
                        ],
                        db_index=True,
                        help_text="Tipo de medição que este sensor realiza",
                        max_length=50,
                        verbose_name="Tipo de Métrica",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        help_text="Unidade de medida (ex: °C, kW, Pa, %, RPM)",
                        max_length=20,
                        verbose_name="Unidade",
                    ),
                ),
                (
                    "thresholds",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='JSON com limites operacionais e alertas:\n        {\n          "min": 18.0,\n          "max": 26.0,\n          "setpoint": 22.0,\n          "warning_low": 19.0,\n          "warning_high": 25.0,\n          "critical_low": 16.0,\n          "critical_high": 28.0\n        }\n        ',
                        verbose_name="Limites e Thresholds",
                    ),
                ),
                (
                    "is_online",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Indica se o sensor está ativo e enviando dados",
                        verbose_name="Online",
                    ),
                ),
                (
                    "availability",
                    models.FloatField(
                        default=0.0,
                        help_text="Porcentagem de uptime nas últimas 24h",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="Disponibilidade (%)",
                    ),
                ),
                (
                    "last_value",
                    models.FloatField(
                        blank=True,
                        help_text="Valor da última medição (cache para performance)",
                        null=True,
                        verbose_name="Última Leitura",
                    ),
                ),
                (
                    "last_reading_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Timestamp da última medição recebida",
                        null=True,
                        verbose_name="Data da Última Leitura",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "device",
                    models.ForeignKey(
                        help_text="Dispositivo IoT ao qual este sensor pertence",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sensors",
                        to="assets.device",
                        verbose_name="Device",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sensor",
                "verbose_name_plural": "Sensors",
                "db_table": "sensors",
                "ordering": ["tag"],
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome do local físico onde os ativos estão instalados",
                        max_length=200,
                        verbose_name="Nome do Site",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Endereço completo do site",
                        verbose_name="Endereço",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Coordenada geográfica (ex: -15.793889)",
                        max_digits=9,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Coordenada geográfica (ex: -47.882778)",
                        max_digits=9,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="America/Sao_Paulo",
                        help_text="IANA timezone (ex: America/Sao_Paulo, America/New_York)",
                        max_length=50,
                        verbose_name="Fuso Horário",
                    ),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True,
                        help_text="Nome da empresa/organização (ex: TrakSense Healthcare)",
                        max_length=200,
                        verbose_name="Empresa",
                    ),
                ),
                (
                    "sector",
                    models.CharField(
                        blank=True,
                        help_text="Setor dentro da empresa (ex: Climatização, Centro Cirúrgico)",
                        max_length=200,
                        verbose_name="Setor",
                    ),
                ),
                (
                    "subsector",
                    models.CharField(
                        blank=True,
                        help_text="Subsetor específico (ex: Chillers, Sala 01)",
                        max_length=200,
                        verbose_name="Subsetor",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
            ],
            options={
                "verbose_name": "Site",
                "verbose_name_plural": "Sites",
                "db_table": "sites",
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="sites_name_4af64c_idx"),
                    models.Index(
                        fields=["company", "sector"], name="sites_company_226e6a_idx"
                    ),
                    models.Index(fields=["is_active"], name="sites_is_acti_8ca84f_idx"),
                ],
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="site",
            field=models.ForeignKey(
                help_text="Site onde o equipamento está instalado",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assets",
                to="assets.site",
                verbose_name="Site",
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["mqtt_client_id"], name="devices_mqtt_cl_bcce11_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["serial_number"], name="devices_serial__9114fa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["asset", "status"], name="devices_asset_i_52ae6b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["status", "last_seen"], name="devices_status_8284e6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(fields=["is_active"], name="devices_is_acti_9ea4e7_idx"),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(fields=["tag"], name="sensors_tag_878411_idx"),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(
                fields=["device", "metric_type"], name="sensors_device__21d769_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(
                fields=["metric_type"], name="sensors_metric__ba7a49_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(fields=["is_online"], name="sensors_is_onli_996fe4_idx"),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(
                fields=["last_reading_at"], name="sensors_last_re_eb1add_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(fields=["is_active"], name="sensors_is_acti_9fc02d_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="sensor",
            unique_together={("device", "metric_type")},
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["tag"], name="assets_tag_83ff9f_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["site", "asset_type"], name="assets_site_id_d7f463_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["status"], name="assets_status_326766_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["is_active"], name="assets_is_acti_0f03da_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["created_at"], name="assets_created_966918_idx"),
        ),
    ]
