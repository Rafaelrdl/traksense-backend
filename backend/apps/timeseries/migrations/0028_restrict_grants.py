# Generated by Copilot - 2024
# Opção B: Restrições de GRANT para app_user

from django.db import migrations


class Migration(migrations.Migration):
    """
    Restringe acesso do app_user apenas às VIEWs tenant-scoped.
    
    Segurança Opção B:
    ------------------
    - REVOKE ALL: remove acesso direto às tabelas base
    - GRANT SELECT: permite acesso apenas às VIEWs filtradas
    - app_user não pode bypassar isolamento de tenant
    - Middleware Django DEVE configurar app.tenant_id
    
    Permissões após esta migration:
    -------------------------------
    - app_migrations: OWNER de todas as tabelas/views (pode tudo)
    - app_user: SELECT apenas em *_tenant VIEWs (não nas bases)
    - app_readonly: SELECT apenas em *_tenant VIEWs (não nas bases)
    """

    dependencies = [
        ('timeseries', '0027_tenant_scoped_views'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            -- ============================================================================
            -- REVOCAR acesso direto às tabelas base e CAGGs
            -- ============================================================================
            REVOKE ALL ON TABLE public.ts_measure FROM app_user;
            REVOKE ALL ON TABLE public.ts_measure_1m FROM app_user;
            REVOKE ALL ON TABLE public.ts_measure_5m FROM app_user;
            REVOKE ALL ON TABLE public.ts_measure_1h FROM app_user;
            
            REVOKE ALL ON TABLE public.ts_measure FROM app_readonly;
            REVOKE ALL ON TABLE public.ts_measure_1m FROM app_readonly;
            REVOKE ALL ON TABLE public.ts_measure_5m FROM app_readonly;
            REVOKE ALL ON TABLE public.ts_measure_1h FROM app_readonly;
            
            -- ============================================================================
            -- CONCEDER SELECT apenas nas VIEWs tenant-scoped
            -- ============================================================================
            GRANT SELECT ON public.ts_measure_tenant TO app_user;
            GRANT SELECT ON public.ts_measure_1m_tenant TO app_user;
            GRANT SELECT ON public.ts_measure_5m_tenant TO app_user;
            GRANT SELECT ON public.ts_measure_1h_tenant TO app_user;
            
            GRANT SELECT ON public.ts_measure_tenant TO app_readonly;
            GRANT SELECT ON public.ts_measure_1m_tenant TO app_readonly;
            GRANT SELECT ON public.ts_measure_5m_tenant TO app_readonly;
            GRANT SELECT ON public.ts_measure_1h_tenant TO app_readonly;
            
            -- ============================================================================
            -- VERIFICAÇÃO (logs apenas, não bloqueia)
            -- ============================================================================
            DO $$ 
            DECLARE
                v_count INTEGER;
            BEGIN
                -- Verifica se app_user NÃO tem acesso direto às bases
                SELECT COUNT(*) INTO v_count
                FROM information_schema.table_privileges
                WHERE grantee = 'app_user'
                  AND table_schema = 'public'
                  AND table_name IN ('ts_measure', 'ts_measure_1m', 'ts_measure_5m', 'ts_measure_1h')
                  AND privilege_type = 'SELECT';
                
                IF v_count > 0 THEN
                    RAISE WARNING 'app_user ainda tem acesso direto a % tabelas base!', v_count;
                ELSE
                    RAISE NOTICE 'app_user restrito às VIEWs tenant-scoped ✓';
                END IF;
                
                -- Verifica se app_user TEM acesso às VIEWs
                SELECT COUNT(*) INTO v_count
                FROM information_schema.table_privileges
                WHERE grantee = 'app_user'
                  AND table_schema = 'public'
                  AND table_name IN ('ts_measure_tenant', 'ts_measure_1m_tenant', 'ts_measure_5m_tenant', 'ts_measure_1h_tenant')
                  AND privilege_type = 'SELECT';
                
                IF v_count = 4 THEN
                    RAISE NOTICE 'app_user tem SELECT em todas as 4 VIEWs tenant ✓';
                ELSE
                    RAISE WARNING 'app_user tem SELECT em apenas % de 4 VIEWs tenant!', v_count;
                END IF;
            END $$;
            """,
            reverse_sql="""
            -- Rollback: restaurar acesso direto às tabelas base
            GRANT SELECT ON TABLE public.ts_measure TO app_user;
            GRANT SELECT ON TABLE public.ts_measure_1m TO app_user;
            GRANT SELECT ON TABLE public.ts_measure_5m TO app_user;
            GRANT SELECT ON TABLE public.ts_measure_1h TO app_user;
            
            GRANT SELECT ON TABLE public.ts_measure TO app_readonly;
            GRANT SELECT ON TABLE public.ts_measure_1m TO app_readonly;
            GRANT SELECT ON TABLE public.ts_measure_5m TO app_readonly;
            GRANT SELECT ON TABLE public.ts_measure_1h TO app_readonly;
            
            -- Remover acesso às VIEWs (não são mais necessárias)
            REVOKE ALL ON public.ts_measure_tenant FROM app_user;
            REVOKE ALL ON public.ts_measure_1m_tenant FROM app_user;
            REVOKE ALL ON public.ts_measure_5m_tenant FROM app_user;
            REVOKE ALL ON public.ts_measure_1h_tenant FROM app_user;
            
            REVOKE ALL ON public.ts_measure_tenant FROM app_readonly;
            REVOKE ALL ON public.ts_measure_1m_tenant FROM app_readonly;
            REVOKE ALL ON public.ts_measure_5m_tenant FROM app_readonly;
            REVOKE ALL ON public.ts_measure_1h_tenant FROM app_readonly;
            """
        ),
    ]
