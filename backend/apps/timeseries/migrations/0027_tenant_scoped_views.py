# Generated by Copilot - 2024
# Opção B: VIEWs com security_barrier para isolamento de tenant

from django.db import migrations


class Migration(migrations.Migration):
    """
    Cria VIEWs tenant-scoped com security_barrier para isolamento.
    
    Estratégia Opção B:
    ------------------
    - RLS desabilitado nas tabelas base (ts_measure, CAGGs)
    - Isolamento via VIEWs filtrando por GUC 'app.tenant_id'
    - security_barrier = on previne bypass via query rewrite
    - app_user só tem GRANT SELECT nas VIEWs (não nas bases)
    
    VIEWs:
    ------
    1. ts_measure_tenant → raw data (14 dias)
    2. ts_measure_1m_tenant → aggregates 1min (365 dias)
    3. ts_measure_5m_tenant → aggregates 5min (730 dias)
    4. ts_measure_1h_tenant → aggregates 1h (1825 dias)
    
    Uso:
    ----
    - Django middleware configura: SET app.tenant_id = '<uuid>'
    - Queries filtram automaticamente por tenant via VIEW
    - API /data/points usa essas VIEWs
    """

    dependencies = [
        ('timeseries', '0026_cagg_1h_materialize'),
    ]

    operations = [
        # ============================================================================
        # 1. VIEW: ts_measure_tenant (raw data filtrado por tenant)
        # ============================================================================
        migrations.RunSQL(
            sql="""
            DROP VIEW IF EXISTS public.ts_measure_tenant CASCADE;
            
            CREATE VIEW public.ts_measure_tenant
            WITH (security_barrier = on) AS
            SELECT 
                tenant_id, device_id, point_id, ts,
                v_num, v_bool, v_text, unit, qual, meta
            FROM public.ts_measure
            WHERE tenant_id = NULLIF(current_setting('app.tenant_id', true), '')::uuid;
            
            COMMENT ON VIEW public.ts_measure_tenant IS
            'VIEW tenant-scoped para dados raw.
             
             Filtro: WHERE tenant_id = current_setting(''app.tenant_id'')::uuid
             Security: security_barrier = on (previne bypass)
             Uso: SELECT * FROM ts_measure_tenant WHERE device_id = ...
             
             CRÍTICO: Django middleware deve configurar GUC app.tenant_id
             Retenção: 14 dias (retention policy na base ts_measure)
             ========================================================';
            """,
            reverse_sql="""
            DROP VIEW IF EXISTS public.ts_measure_tenant CASCADE;
            """
        ),
        
        # ============================================================================
        # 2. VIEW: ts_measure_1m_tenant (CAGG 1min filtrado por tenant)
        # ============================================================================
        migrations.RunSQL(
            sql="""
            DROP VIEW IF EXISTS public.ts_measure_1m_tenant CASCADE;
            
            CREATE VIEW public.ts_measure_1m_tenant
            WITH (security_barrier = on) AS
            SELECT 
                bucket, tenant_id, device_id, point_id,
                v_avg, v_max, v_min, n
            FROM public.ts_measure_1m
            WHERE tenant_id = NULLIF(current_setting('app.tenant_id', true), '')::uuid;
            
            COMMENT ON VIEW public.ts_measure_1m_tenant IS
            'VIEW tenant-scoped para CAGG 1 minuto.
             
             Filtro: WHERE tenant_id = current_setting(''app.tenant_id'')::uuid
             Security: security_barrier = on (previne bypass)
             Uso: SELECT * FROM ts_measure_1m_tenant WHERE device_id = ...
             
             API: GET /data/points?agg=1m → usa esta VIEW
             Retenção: 365 dias (retention policy na base ts_measure_1m)
             Compressão: ativa (chunks > 7 dias)
             =====================================================';
            """,
            reverse_sql="""
            DROP VIEW IF EXISTS public.ts_measure_1m_tenant CASCADE;
            """
        ),
        
        # ============================================================================
        # 3. VIEW: ts_measure_5m_tenant (CAGG 5min filtrado por tenant)
        # ============================================================================
        migrations.RunSQL(
            sql="""
            DROP VIEW IF EXISTS public.ts_measure_5m_tenant CASCADE;
            
            CREATE VIEW public.ts_measure_5m_tenant
            WITH (security_barrier = on) AS
            SELECT 
                bucket, tenant_id, device_id, point_id,
                v_avg, v_max, v_min, n
            FROM public.ts_measure_5m
            WHERE tenant_id = NULLIF(current_setting('app.tenant_id', true), '')::uuid;
            
            COMMENT ON VIEW public.ts_measure_5m_tenant IS
            'VIEW tenant-scoped para CAGG 5 minutos.
             
             Filtro: WHERE tenant_id = current_setting(''app.tenant_id'')::uuid
             Security: security_barrier = on (previne bypass)
             Uso: SELECT * FROM ts_measure_5m_tenant WHERE device_id = ...
             
             API: GET /data/points?agg=5m → usa esta VIEW
             Retenção: 730 dias (retention policy na base ts_measure_5m)
             Compressão: ativa (chunks > 7 dias)
             =====================================================';
            """,
            reverse_sql="""
            DROP VIEW IF EXISTS public.ts_measure_5m_tenant CASCADE;
            """
        ),
        
        # ============================================================================
        # 4. VIEW: ts_measure_1h_tenant (CAGG 1h filtrado por tenant)
        # ============================================================================
        migrations.RunSQL(
            sql="""
            DROP VIEW IF EXISTS public.ts_measure_1h_tenant CASCADE;
            
            CREATE VIEW public.ts_measure_1h_tenant
            WITH (security_barrier = on) AS
            SELECT 
                bucket, tenant_id, device_id, point_id,
                v_avg, v_max, v_min, n
            FROM public.ts_measure_1h
            WHERE tenant_id = NULLIF(current_setting('app.tenant_id', true), '')::uuid;
            
            COMMENT ON VIEW public.ts_measure_1h_tenant IS
            'VIEW tenant-scoped para CAGG 1 hora.
             
             Filtro: WHERE tenant_id = current_setting(''app.tenant_id'')::uuid
             Security: security_barrier = on (previne bypass)
             Uso: SELECT * FROM ts_measure_1h_tenant WHERE device_id = ...
             
             API: GET /data/points?agg=1h → usa esta VIEW
             Retenção: 1825 dias (retention policy na base ts_measure_1h)
             Compressão: ativa (chunks > 14 dias)
             =====================================================';
            """,
            reverse_sql="""
            DROP VIEW IF EXISTS public.ts_measure_1h_tenant CASCADE;
            """
        ),
    ]
