# Generated by Django 4.2.23 on 2025-10-08 00:36

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome único do dispositivo (ex: 'Inversor 01 - Sala A')",
                        max_length=200,
                    ),
                ),
                (
                    "site_id",
                    models.CharField(
                        blank=True,
                        help_text="Identificador do site onde o device está instalado (reservado)",
                        max_length=100,
                    ),
                ),
                (
                    "topic_base",
                    models.CharField(
                        blank=True,
                        help_text="Prefixo MQTT para este device (será usado na Fase 3)",
                        max_length=200,
                    ),
                ),
                (
                    "credentials_id",
                    models.CharField(
                        blank=True,
                        help_text="ID das credenciais EMQX (será usado na Fase 3)",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pendente"),
                            ("ACTIVE", "Ativo"),
                            ("DECOMMISSIONED", "Desativado"),
                        ],
                        default="PENDING",
                        help_text="Status do ciclo de vida do dispositivo",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Dispositivo",
                "verbose_name_plural": "Dispositivos",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DeviceTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "code",
                    models.SlugField(
                        help_text="Código único do template (ex: inverter_v1_parsec)",
                        max_length=100,
                    ),
                ),
                ("name", models.CharField(help_text="Nome legível do template", max_length=200)),
                (
                    "version",
                    models.PositiveIntegerField(
                        default=1, help_text="Número de versão (incrementa a cada mudança)"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrição detalhada do template"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "superseded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Versão mais nova que substitui esta (se depreciada)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supersedes",
                        to="devices.devicetemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template de Dispositivo",
                "verbose_name_plural": "Templates de Dispositivos",
                "ordering": ["code", "-version"],
            },
        ),
        migrations.CreateModel(
            name="PointTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.SlugField(
                        help_text="Nome único do ponto dentro do template (ex: temp_agua)",
                        max_length=100,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Nome legível do ponto (ex: 'Temperatura da água')",
                        max_length=200,
                    ),
                ),
                (
                    "ptype",
                    models.CharField(
                        choices=[
                            ("NUMERIC", "Numérico"),
                            ("BOOL", "Booleano"),
                            ("ENUM", "Enumeração"),
                            ("TEXT", "Texto"),
                        ],
                        help_text="Tipo de dado do ponto",
                        max_length=20,
                        verbose_name="Tipo",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        help_text="Unidade de medida (ex: °C, dBm) - apenas para NUMERIC",
                        max_length=20,
                    ),
                ),
                (
                    "enum_values",
                    models.JSONField(
                        blank=True,
                        help_text="Lista de valores válidos para ENUM (ex: ['RUN','STOP','FAULT'])",
                        null=True,
                    ),
                ),
                (
                    "polarity",
                    models.CharField(
                        choices=[("NORMAL", "Normal"), ("INVERTED", "Invertida")],
                        default="NORMAL",
                        help_text="Polaridade para alarmes (NORMAL ou INVERTED)",
                        max_length=20,
                    ),
                ),
                (
                    "hysteresis",
                    models.FloatField(
                        blank=True,
                        help_text="Histerese padrão para evitar flapping de alarmes (≥ 0)",
                        null=True,
                    ),
                ),
                (
                    "default_limits",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Limites padrão (JSON) para aplicar ao instanciar Point",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "device_template",
                    models.ForeignKey(
                        help_text="Template de dispositivo ao qual este ponto pertence",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="point_templates",
                        to="devices.devicetemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template de Ponto",
                "verbose_name_plural": "Templates de Pontos",
                "ordering": ["device_template", "name"],
            },
        ),
        migrations.CreateModel(
            name="Point",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.SlugField(
                        help_text="Nome único do ponto (ex: temp_agua)", max_length=100
                    ),
                ),
                ("label", models.CharField(help_text="Nome legível do ponto", max_length=200)),
                (
                    "unit",
                    models.CharField(blank=True, help_text="Unidade de medida", max_length=20),
                ),
                (
                    "polarity",
                    models.CharField(
                        choices=[("NORMAL", "Normal"), ("INVERTED", "Invertida")],
                        default="NORMAL",
                        help_text="Polaridade para alarmes",
                        max_length=20,
                    ),
                ),
                (
                    "limits",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Limites customizados (JSON) - editável pelo cliente",
                    ),
                ),
                (
                    "is_contracted",
                    models.BooleanField(
                        default=True, help_text="Se este ponto está ativo/contratado pelo cliente"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "device",
                    models.ForeignKey(
                        help_text="Device ao qual este ponto pertence",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="points",
                        to="devices.device",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        help_text="Template de origem (para rastreabilidade)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="instances",
                        to="devices.pointtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ponto",
                "verbose_name_plural": "Pontos",
                "ordering": ["device", "name"],
            },
        ),
        migrations.AddField(
            model_name="device",
            name="template",
            field=models.ForeignKey(
                help_text="Template que define o tipo deste dispositivo",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="devices.devicetemplate",
            ),
        ),
        migrations.AddConstraint(
            model_name="pointtemplate",
            constraint=models.UniqueConstraint(
                fields=("device_template", "name"), name="unique_point_template_per_device"
            ),
        ),
        migrations.AddConstraint(
            model_name="point",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="unique_point_per_device"
            ),
        ),
        migrations.AddConstraint(
            model_name="devicetemplate",
            constraint=models.UniqueConstraint(
                fields=("code", "version"), name="unique_device_template_code_version"
            ),
        ),
    ]
