# ============================================================================
# Variáveis de Ambiente - TrakSense (TEMPLATE GERAL)
# ============================================================================
# Este arquivo é um TEMPLATE de referência geral.
# 
# ATENÇÃO: Docker Compose NÃO lê este arquivo!
#          Ele usa arquivos específicos por serviço:
#          - .env.api (Django API)
#          - .env.ingest (Ingest Service)
#
# INSTRUÇÕES:
# -----------
# 1. Copie os arquivos .example para suas versões sem .example:
#    cp .env.api.example .env.api
#    cp .env.ingest.example .env.ingest
#
# 2. Edite cada arquivo conforme necessário
#
# 3. NUNCA commite arquivos .env no Git!
#    (já estão no .gitignore)
#
# ESTRUTURA DO PROJETO:
# --------------------
# infra/
#   ├── .env.api           ← Django API (usado pelo docker-compose)
#   ├── .env.api.example   ← Template para .env.api
#   ├── .env.ingest        ← Ingest Service (usado pelo docker-compose)
#   ├── .env.ingest.example ← Template para .env.ingest
#   ├── .env.example       ← Este arquivo (referência apenas)
#   └── docker-compose.yml ← Orquestração dos serviços
#
# VARIÁVEIS POR SERVIÇO:
# ---------------------
# .env.api (Django):
#   - DJANGO_DEBUG
#   - DJANGO_SECRET_KEY
#   - DATABASE_URL
#   - REDIS_URL
#   - ALLOWED_HOSTS
#
# .env.ingest (Ingest):
#   - MQTT_URL
#   - MQTT_CLIENT_ID
#   - DATABASE_URL
#   - BATCH_SIZE (Fase 2)
#   - LOG_LEVEL (Fase 2)
#
# SEGURANÇA:
# ---------
# ⚠️  NUNCA commite valores reais de produção!
# ⚠️  Use secrets gerenciados (Docker Swarm, Kubernetes, Vault)
# ⚠️  Gere SECRET_KEY aleatória: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
# ⚠️  Mude senhas padrão (postgres, redis, emqx)
# ⚠️  Ative TLS em produção (mqtts://, sslmode=require)
#
# PARA MAIS INFORMAÇÕES:
# ---------------------
# Veja os arquivos .env.*.example para documentação completa de cada variável.
# ============================================================================
